import react
import react.components.Selection
import react.components.Picker
import orm.models as models
import orm.tools as tools

View, Selection, Picker = react.get_components('View', 'Selection', 'Picker')

TextField, Checkbox, IconButton, Button = react.get_framework_components('TextField', 'Checkbox', 'IconButton', 'Button')

Input = react.wrap_component('input') #Web only, will not work in Android/iOS

def readAsDataURL(file):
    def init(resolve, reject):
        if not file: reject(new Error('No file available'))
        reader = new FileReader();
        def onload(event): return resolve(event.target.result)
        reader.onload = onload
        reader.readAsDataURL(file)
    return new Promise(init)

class Field(React.Component):

    def __init__(self):
        self.state = {'menuItems': []}
        return

    @async
    def componentDidMount(self):
        #if self.refs and self.refs.imageButton: self.refs.imageButton.onclick = self.onPressImage
        props = self.props
        model = props.model
        context = models.env.context
        field = models.env[model]._fields[props.name]
        #value = active_id[props.name]
        console.log(field)
        if field.type in ['many2one', 'one2one']:
           await [models.env.context.wait_active_id]
           console.log('der')
           active_id = props.add_active_id or models.env.context.active_id or {}
           value = active_id[props.name]
           #if not value: return
           record, records = await ([models.env[field.relation].browse(value) if value else {}, {}]) #models.env[field.relation].search()])
           return self.setState({'selectedItem': record.name}) #, 'menuItems': [{'id': record.id, 'name': record.name} for record in records]})

    def render(self):
        props = self.props
        model = props.model
        context = models.env.context
        field = models.env[model]._fields[props.name]
        if field.type in ['many2many', 'one2many'] and props.children:
           console.log(props.children)
           return props.children
        active_id = props.add_active_id or models.env.context.active_id or {}
        invisible = props.invisible
        if v'props.invisible instanceof Function':
           invisible = props.invisible(models, tools, active_id)
        if invisible: return None
        readonly = field.readonly or props.readonly
        readonly = readonly(models, tools, active_id) if v'readonly instanceof Function' else readonly
        labelStyle = {'marginTop': -10, 'marginLeft': -10, 'color': 'black', 'fontSize': 20, 'fontWeight': '500'}
        containerStyle = {'marginTop': 5, 'maxWidth': 250, 'marginBottom': 20}
        inputStyle = {'fontSize': 14, 'marginBottom': 5} #, 'height': 'auto', 'minHeight': 30}
        underlineColor = 'black' #'#e0e0e0'

        if field.type == 'boolean' or (field.type == 'binary' and self.props.widget == 'image'):
           containerStyle.marginTop = -20
           def onPress():
               if readonly or not context.editing: return
               if field.type == 'binary':
                  @async
                  def onChange(event):
                      result = await [readAsDataURL(self.imageInput.files[0])]
                      active_id[props.name] = result #.split(';base64,')[1]
                      return self.setState({})
                  self.imageInput.onchange = onChange
                  self.imageInput.click()
                  return
               active_id[props.name] = not active_id[props.name]
               return self.setState({})
           #self.onPressImage = onPress.bind(self)
           def onRef(input):
               input = self.imageInput or input
               if not input: return
               self.imageInput = input
               if input.previousElementSibling and input.previousElementSibling.children.length: input.previousElementSibling.onclick = onPress
               else:
                  element = input.parentElement.parentElement.parentElement.nextElementSibling
                  if element: element.onclick = onPress
           del labelStyle.marginTop
           labelStyle.marginLeft = 6
           prefix = (
               Checkbox (checked=active_id[props.name] or False, onPress=onPress)
           ) if field.type == 'boolean' else View (
               IconButton (name='photo-camera', size=36) if not active_id[props.name] else View(), tools.client.Native.Platform.OS == 'web' and
               Input (type='file', ref=onRef, style={'display': 'none'})
           )
           textField = TextField (type='flat', prefix=prefix, label=self.props.string or field.string, labelStyle=labelStyle, containerStyle=containerStyle, style=inputStyle, underlineColor='transparent', disabled=True, editable=False, value="")
           if active_id[props.name] and field.type == 'binary': return [
               textField,
               react.wrap_component(tools.client.Native.Image) (style={'height': 150, 'marginTop': -50}, source={'uri': active_id[props.name]}, onPress=onPress)
           ]
           return textField

        if field.type == 'binary':
           def onClear():
               active_id[props.name] = ''
               return self.setState({})
           @async
           def onChange(event):
               result = await [readAsDataURL(event.target.files[0])]
               active_id[props.name] = result
               return self.setState({})
           inputStyle = tools.merge(inputStyle, {'paddingLeft': 12, 'height': 'auto', 'minHeight': 30})
           return (
               Picker (label=self.props.string or field.string, onClear=onClear, onChange=onChange, prefix=View(), disabled=readonly or not context.editing, editable=not (readonly or not context.editing), labelStyle=labelStyle, containerStyle=containerStyle, inputStyle=inputStyle, underlineColor=underlineColor, value=active_id[props.name])
           )

        if field.type == 'selection' and props.widget == 'statusbar':
           color = 'rgba(0, 0, 0, 0.26)'
           selections = field.selection.apply(context.active_id, [context.active_id]) if v'typeof field.selection' == 'function' else field.selection
           if props.visible:
              selections = [selection for selection in selections if props.visible.split(',').indexOf(selection[0]) > -1 or (models.env.context.active_id and models.env.context.active_id[props.name] == selection[0])]
           selections = tools.copy(selections).reverse()
           def template(selection):
               return Button (style={'marginVertical': 10, 'marginHorizontal': 6, 'paddingHorizontal': 4, 'paddingLeft': 4, 'paddingRight': 4}, type='text', text=selection[1], textColor=color if not context.active_id or context.active_id[props.name] != selection[0] else undefined)
           def arrow(selection):
               style = {'marginVertical': 10, 'marginHorizontal': 0, 'paddingLeft': 0, 'paddingRight': 0, 'minWidth': 7, 'maxWidth': 10}
               if not context.active_id or context.active_id[props.name] != selection[0]:
                  return Button (style=style, type='text', disabled=True, text='>')
               else:
                  return Button (style=style, type='text', disabled=True, '>')
           return View (style={'flex': 1, 'flexDirection': 'row-reverse'}, [
               [arrow(selection), template(selection)] if index - 1 != -1 else template(selection)
           for index, selection in enumerate(selections)])

        if field.type in ['many2one', 'one2one', 'selection']:
           @async
           def onFocus():
               console.log('dor')
               records = await [models.env[field.relation].search()]
               return self.setState({'menuItems': [{'id': record.id, 'text': record.name} for record in records]})
           def onSelect(value):
               active_id[props.name] = value.id
           if field.type == 'selection':
              selection = field.selection.apply(None) if v'field.selection instanceof Function' else field.selection
              self.state.menuItems = [{'id': key, 'text': value} for key, value in selection]
              if active_id[props.name]: self.state.selectedItem = dict(selection)[active_id[props.name]]
           inputStyle = tools.merge(inputStyle, {'paddingLeft': 12, 'height': 'auto', 'minHeight': 30})
           return (
               Selection (label=self.props.string or field.string, onFocus=field.type != 'selection' and onFocus, onSelect=onSelect, items=self.state.menuItems, selectedItem=self.state.selectedItem, prefix=View(), disabled=readonly or not context.editing, editable=not (readonly or not context.editing), labelStyle=labelStyle, containerStyle=containerStyle, inputStyle=inputStyle, underlineColor=underlineColor)
           )

        def onChangeText(value):
            if field.type in ['integer', 'float']:
               if isNaN(value): return
               if not value: value = 0
            if readonly or not context.editing: return
            active_id[props.name] = value
            return self.setState({})

        return (
            TextField (keyboardType='numeric' if field.type in ['integer', 'float'] else 'default', prefix=View(), style={'fontSize': 14, 'marginBottom': 5, 'paddingLeft': 12, 'height': 'auto', 'minHeight': 30}, labelStyle=labelStyle, containerStyle=containerStyle, underlineColor=underlineColor, disabled=readonly or not context.editing, editable=not (readonly or not context.editing), type='outlined', label=self.props.string or field.string, value=(active_id[props.name] or '').toString(), onChangeText=onChangeText)
        )

react.register_component(Field)
