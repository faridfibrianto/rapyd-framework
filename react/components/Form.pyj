import react
import react.components.Page
import orm.models as models
import orm.tools as tools

View, Text, Page = react.get_components('View', 'Text', 'Page')

Header, Button = react.get_framework_components('DataTableHeader', 'Button')

class Form(React.Component):

    def __init__(self, props):
        #props = self.props
        models.env.context.editing = True if props.isCustomView else False
        self.state = models.env.context
        self.state.edit_function = self.edit.bind(self)
        #models.env.context.active_lines = {}
        #models.env.context.active_task = []
        #models.env.context.active_mount = []

    @async
    def componentDidMount(self):
        model = self.props.model
        models.env.context.active_lines = {}
        models.env.context.active_task = []
        models.env.context.active_mount = []
        if not self.props.active_id:
           models.env.context.active_id = models.env[model].browse()
           await [models.env.context.active_id._wait_promise()]
           models.env.context.editing = True
           return models.env.context.refresh() #self.setState(models.env.context)
        models.env.context.active_id = await [models.env[model].browse(self.props.active_id)]
        return models.env.context.refresh() #self.setState(models.env.context)

    @async
    def edit(self):
        props = self.props
        def wait(): return not tools.client.onchange_running
        await [tools.wait_exist(wait)]
        model = models.env.context.active_id._name
        offline = JSON.parse({'True': 'true', 'False': 'false'}[self.props.offline] or self.props.offline) if self.props.offline else False
        if not self.state.editing:
           models.env.context.editing = True
           return models.env.context.refresh() #this.setState(tools.merge({}, models.env.context, {'offline': offline}))
        operation = 'write' if models.env.context.active_id.id else 'create'
        try:
            await [models.env.context.active_id[operation]({}, not offline)]
        except Exception as error:
            if error and error.constructor == tools.exceptions.RequiredError:
               error.field_map = {}
               for field in error.fields:
                   error.field_map[field] = True
               models.env.context.active_error = error;
               await [models.env.context.refresh()] #[this.setState({'active_id': models.env.context.active_id})]
               window.alert(error.message) #('Some fields are required')
               #tools.client.app.toast.create({'text': 'Some fields are required', 'closeButton': False, 'closeTimeout': 2000, position: 'center'}).open()
               return
            else:
               raise error
        for task in models.env.context.active_task:
            result = task()
            if result and result.constructor == Promise: await (result)
        models.env.context.active_task = []
        if operation == 'create':
           self.props.history.replace(self.props.history.location.pathname + '/' + models.env.context.active_id.id)
           promises = []
           for field in models.env.context.active_lines:
               if models.env.context.active_id._fields[field].type == 'many2many': continue
               inverse_field = models.env.context.active_id._fields[field].inverse
               promises.push(models.env.context.active_lines[field].write({inverse_field: models.env.context.active_id.id}))
               models.env.context.active_id[field] = models.env.context.active_lines[field].ids
           await (promises)
        if not self.props.isCustomView: models.env.context.editing = False
        if offline:
           if not models.env.context.unsaved: models.env.context.unsaved = {}
           if not models.env.context.unsaved[model]: models.env.context.unsaved[model] = {}
           models.env.context.unsaved[model][models.env.context.active_id.id] = models.env.context.active_id.id
        #await [tools.client.api.update_session({'unsaved': models.env.context.unsaved})]
        await [models.env.context.refresh()] #[self.setState(tools.merge({}, models.env.context, {'offline': offline}))]

    @async
    def upload(self):
        return #TODO

    def render(self):
        props = self.props
        model = self.props.model
        if props.isCustomView: return Page (history=self.props.history, title=tools.view[model].string, self.props.children)
        title = (
            [
                Text (self.props.title or tools.view[model].string),
                Text (style={'color': '#666666'}, ' / ' + (self.state.active_id.name if self.state.active_id and self.state.active_id.id else 'New'))
            ]
        )
        #title = self.props.title or tools.view[model].string
        def onPressEdit():
            return self.edit() #.catch(tools.client.api.handleClientError)
        return (
            Page (history=self.props.history, title=tools.view[model].string,
                View (
                    View (style={'borderBottomColor': '#e1e1e1', 'borderBottomStyle': 'solid', 'borderBottomWidth': 0.5},
                        Header (title=title, rightActions=[{'name': 'more-vert'}]),
                        View (style={'flex': 1, 'flexDirection': 'row'},
                            Button (onPress=onPressEdit, style={'margin': 10, 'marginTop': 0}, text='Save' if self.state.editing else 'Edit', type='flat'),
                        ),
                    ),
                    self.props.children
                )
            )
        )

react.register_component(Form)
